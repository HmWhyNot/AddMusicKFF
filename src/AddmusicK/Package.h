#pragma once

#include <filesystem>
#include <array>
#include <iterator>
#include <fstream>
#include <string_view>

// These headers are generated by CMake in the build directory.
#include "packageblob_asm.h"
#include "packageblob_boilerplate.h"

namespace fs = std::filesystem;

namespace AddMusic
{

/**
 * @brief Helper class to extract the content of a program-embedded folder.
 */
struct Package
{
	const size_t package_file_amount;
	const char* const* package_files;
	const size_t* package_lengths;
	const size_t* package_ranges;
	const std::string_view package_blob;

	bool extract(const fs::path& where)
	{
		if (!fs::exists(where))
			fs::create_directories(where);
		
		for (uint32_t i = 0; i < package_file_amount; i++)
		{
			fs::path l_relpath {package_files[i]};
			if ((l_relpath != l_relpath.filename()) && !fs::exists(where / l_relpath.parent_path()))
				fs::create_directories(where / l_relpath.parent_path());
			std::ofstream ofs (where / l_relpath, std::ios::binary);
			std::copy(package_blob.begin() + package_ranges[i], package_blob.begin() + package_ranges[i+1], std::ostream_iterator<uint8_t>(ofs));
			ofs.close();
		}
		return true;
	}
};

/**
 * @brief Package which holds the ASM and SNES drivers.
 */
static Package asm_package {
	.package_file_amount = __package_file_amount_asm,
	.package_files = __package_files_asm,
	.package_lengths = __package_lengths_asm,
	.package_ranges = __package_ranges_asm,
	.package_blob = reinterpret_cast<const char*>(__package_blob_asm.data())
};

/**
 * @brief Package which holds a boilerplate for AMK building.
 */
static Package boilerplate_package {
	.package_file_amount = __package_file_amount_boilerplate,
	.package_files = __package_files_boilerplate,
	.package_lengths = __package_lengths_boilerplate,
	.package_ranges = __package_ranges_boilerplate,
	.package_blob = reinterpret_cast<const char*>(__package_blob_boilerplate.data())
};

}